{"ast":null,"code":"var _jsxFileName = \"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/MapOne.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, GoogleApiWrapper } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\"; // import Autocomplete from 'react-google-autocomplete';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\");\nGeocode.enableDebug();\n\nclass MapOne extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      // console.log(state)\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = e => {};\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      // console.log('plc', place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * Get the city and set the city input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n\n\n  // ***************************************\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      style: {\n        paddingLeft: '10px',\n        marginTop: '2px'\n      },\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsxDEV(InfoWindow, {\n        onClose: this.onInfoWindowClose,\n        position: {\n          lat: this.state.markerPosition.lat + 0.0018,\n          lng: this.state.markerPosition.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              padding: 0,\n              margin: 0\n            },\n            children: this.state.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // style={{\n      //     width: '50%',\n      //     height: '20px',\n      //     paddingLeft: '10px',\n      //     marginTop: '2px',\n      //     marginBottom: '100px'\n      // }}\n      , {\n        onPlaceSelected: this.onPlaceSelected,\n        types: ['(regions)']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 21\n    }, this)));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            style: {\n              marginTop: '5px',\n              padding: '5px',\n              marginRight: '2px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"Area\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"area\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              defaultValue: this.state.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            style: {\n              marginTop: '5px',\n              padding: '5px',\n              marginRight: '2px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"city\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              defaultValue: this.state.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            style: {\n              marginTop: '5px',\n              padding: '2px',\n              marginRight: '2px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"state\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              defaultValue: this.state.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            style: {\n              marginTop: '5px',\n              padding: '2px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"address\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              defaultValue: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(AsyncMap // googleMapURL=\" https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\"\n        // googleMapURL= \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia&inputtype=textquery&fields=photos,formatted_address,name,rating,opening_hours,geometry&key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\"\n        // googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&ll=47.419731,-122.088715&spn=0.004250,0.011579&t=h&iwloc=A&hl=en\"\n        , {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&libraries=geometry,drawing,places,address&libraries=places\" // googleMapURL= 'https://maps.googleapis.com/maps/api/geocode/json?address=${Anfield}%20Rd,%20${Anfield},%20${Liverpool}%20${L4%200TH},%20${United}%20${Kingdom}&key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo'\n          // googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&libraries=places\"\n          ,\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: this.props.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 27\n      }, this);\n    } else {\n      map = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: this.props.height\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 19\n      }, this);\n    }\n\n    return map;\n  }\n\n}\n\nexport default MapOne;","map":{"version":3,"sources":["/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/MapOne.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","GoogleApiWrapper","Autocomplete","Geocode","setApiKey","enableDebug","MapOne","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","e","onMarkerDragEnd","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","markerPosition","mapPosition","error","console","onPlaceSelected","place","latValue","geometry","location","lngValue","center","componentDidMount","log","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","paddingLeft","marginTop","google","zoom","padding","margin","map","undefined","marginRight","height"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, GoogleApiWrapper,  } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\n// import Autocomplete from 'react-google-autocomplete';\nGeocode.setApiKey(\"AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\");\nGeocode.enableDebug();\nclass MapOne extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: '',\n            city: '',\n            area: '',\n            state: '',\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        }\n    }\n    /**\n      * Get the current address from the default map position and set those values in the state\n      */\n    componentDidMount() {\n        Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng)\n        .then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n\n                console.log('city', city, area, state);\n\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    /**\n      * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n      *\n      * @param nextProps\n      * @param nextState\n      * @return {boolean}\n      */\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city ||\n            this.state.area !== nextState.area ||\n            this.state.state !== nextState.state\n        ) {\n            return true\n        } else if (this.props.center.lat === nextProps.center.lat) {\n            return false\n        }\n    }\n    /**\n      * Get the city and set the city input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n    /**\n      * Get the area and set the area input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n    getArea = (addressArray) => {\n        let area = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n    /**\n      * Get the address and set the address input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n    /**\n      * And function for city,state and address input\n      * @param event\n      */\n    onChange = (event) => {\n        // console.log(state)\n        this.setState({ [event.target.name]: event.target.value });\n\n    };\n    /**\n      * This Event triggers when the marker window is closed\n      *\n      * @param event\n     // ********************************************************\n\n     // ***************************************\n      */\n    onInfoWindowClose = (e) => {\n    };\n    // *****************************************\n    onMarkerDragEnd = (event) => {\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n\n\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n\n    // ******************************************\n    /**\n        * When the user types an address in the search box we need to install and import react-google-autocomplete\n        * @param place\n        */\n    onPlaceSelected = (place) => {\n        // console.log('plc', place);\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n        // Set these values in the state.\n        this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n    // ***************************************\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(\n                props => (\n                    <GoogleMap\n                        style={{ paddingLeft: '10px',\n                            marginTop: '2px'\n                    }}\n                        google={this.props.google}\n                    defaultZoom={this.props.zoom}\n                    defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    >\n                        {/* <InfoWindow onClose={this.onInfoWindowClose}>\n                        </InfoWindow> */}\n                    {/* // ************************************************************************************************* */}\n                    <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}>\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                            </div>\n                            </InfoWindow>\n                        <Marker google={this.props.google}\n                            name={'Dolores park'}\n                            draggable={true}\n                            onDragEnd={this.onMarkerDragEnd}\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                        />\n                        <Marker/>\n                        {/* For Auto complete Search Box */}\n                        <Autocomplete\n                            // style={{\n                            //     width: '50%',\n                            //     height: '20px',\n                            //     paddingLeft: '10px',\n                            //     marginTop: '2px',\n                            //     marginBottom: '100px'\n                            // }}\n                            onPlaceSelected={this.onPlaceSelected}\n                            types={['(regions)']}/>\n\n                            </GoogleMap>\n                        )\n                    )\n                );\n                \n                let map;\n                if (this.props.center.lat !== undefined) {\n                    map = <div>\n                <div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '5px', marginRight: '2px'}}>\n                                <label htmlFor=\"\">Area</label>\n                                <input type=\"text\" name=\"area\" className=\"form-control\" onChange={this.onChange}  defaultValue={this.state.city} />\n                    </div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '5px', marginRight: '2px' }}>\n                        <label htmlFor=\"\">City</label>\n                                <input type=\"text\" name=\"city\" className=\"form-control\" onChange={this.onChange} defaultValue={this.state.area} />\n                    </div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '2px', marginRight: '2px' }} >\n                        <label htmlFor=\"\">State</label>\n                                <input type=\"text\" name=\"state\" className=\"form-control\" onChange={this.onChange}  defaultValue={this.state.state} />\n                    </div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '2px' }}>\n                        <label htmlFor=\"\">Address</label>\n                                <input type=\"text\" name=\"address\" className=\"form-control\" onChange={this.onChange}  defaultValue={this.state.address} />\n                                {/* <button onC >Search</button> */}\n                    </div >\n                </div >\n                <AsyncMap\n                            // googleMapURL=\" https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\"\n                \n                    // googleMapURL= \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia&inputtype=textquery&fields=photos,formatted_address,name,rating,opening_hours,geometry&key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\"\n                        // googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&ll=47.419731,-122.088715&spn=0.004250,0.011579&t=h&iwloc=A&hl=en\"\n                            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&libraries=geometry,drawing,places,address&libraries=places\"\n                            // googleMapURL= 'https://maps.googleapis.com/maps/api/geocode/json?address=${Anfield}%20Rd,%20${Anfield},%20${Liverpool}%20${L4%200TH},%20${United}%20${Kingdom}&key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo'\n                            // googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&libraries=places\"\n                    loadingElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                    containerElement={\n                        <div style={{ height: this.props.height }} />\n                    }\n                    mapElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                />\n            </div>\n        } else {\n            map = <div style={{ height: this.props.height }} />\n        }\n        return (map)\n    }\n}\nexport default MapOne\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}