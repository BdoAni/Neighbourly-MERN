{"ast":null,"code":"var _jsxFileName = \"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport \"./Stripe.css\";\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\nexport default function CheckoutForm(props) {\n  _s();\n\n  const classes = useStyles();\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  const [loading, setLoading] = useState(true);\n  const [thisUser, setThisUser] = useState({});\n  const [thisTool, setThisTool] = useState({});\n  const [thisToolPrice, setThisToolPrice] = useState(1);\n  const {\n    user,\n    tool,\n    toolPrice\n  } = props;\n  useEffect(() => {\n    axios.get(`http://localhost:8000/api/user/${user}`).then(res => {\n      // console.log(res);\n      setThisUser(res.data.user); // setThisTool(res.data.user.tools);\n\n      setLoading(false);\n    }).catch(err => console.log(err));\n  }, []);\n  useEffect(() => {\n    axios.get(`http://localhost:8000/api/tool/${tool}`).then(res => {\n      // console.log(res);\n      setThisTool(res.data.results);\n      setThisToolPrice(res.data.results.price);\n    });\n  }, []);\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"http://localhost:8000/create-payment-intent\", {\n      //api/userid/toolid/\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [toolPrice]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  }; // console.log(toolPrice);\n\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginRight: \"5px\"\n        },\n        color: \"primary\",\n        variant: \"outlined\",\n        onClick: e => navigate(`/homepage`),\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"outlined\",\n        onClick: e => navigate(`/user/${thisUser._id}`),\n        children: [thisUser.firstName, \"'s details page\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Confirmation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        variant: \"outlined\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            component: \"p\",\n            children: [\"You are about to rent the \", thisTool.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You are about to rent the \", thisTool.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"from \", thisUser.firstName, \" \", thisUser.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"for $\", thisTool.price, \" a day.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"If this is correct, please enter your card information below\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"payment-form\",\n        class: \"form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          class: \"input\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          placeholder: thisUser.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n          id: \"card-element\",\n          options: cardStyle,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: processing || disabled || succeeded,\n          id: \"submit\",\n          class: \"button\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"button-text\",\n            children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner\",\n              id: \"spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 25\n            }, this) : \"Pay now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-error\",\n          role: \"alert\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: succeeded ? \"result-message\" : \"result-message hidden\",\n          children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://dashboard.stripe.com/test/payments`,\n            children: [\" \", \" Stripe dashboard.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this), \"Refresh the page to pay again.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(CheckoutForm, \"pjP0rtw50uSDYjOWY87xXXolYqw=\", false, function () {\n  return [useStyles, useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/CheckoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","axios","Link","navigate","Button","makeStyles","Card","CardActions","CardContent","Typography","useStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","CheckoutForm","props","classes","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","email","setEmail","stripe","elements","loading","setLoading","thisUser","setThisUser","thisTool","setThisTool","thisToolPrice","setThisToolPrice","user","tool","toolPrice","get","then","res","data","catch","err","console","log","results","price","window","fetch","method","headers","body","JSON","stringify","items","json","cardStyle","style","base","color","fontFamily","fontSmoothing","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","marginRight","e","_id","firstName","type","lastName","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    CardElement,\n    useStripe,\n    useElements\n} from \"@stripe/react-stripe-js\";\nimport \"./Stripe.css\";\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n      minWidth: 275,\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n  });\n\n\nexport default function CheckoutForm(props) {\n    const classes = useStyles();\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    const [disabled, setDisabled] = useState(true);\n    const [clientSecret, setClientSecret] = useState('');\n    const [email, setEmail] = useState('');\n    const stripe = useStripe();\n    const elements = useElements();\n    const [loading, setLoading] = useState(true);\n    const [thisUser, setThisUser] = useState({})\n    const [thisTool, setThisTool] = useState({})\n    const [thisToolPrice, setThisToolPrice] = useState(1)\n    const { user, tool, toolPrice } = props;\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/user/${user}`)\n            .then(res => {\n                // console.log(res);\n                setThisUser(res.data.user);\n                // setThisTool(res.data.user.tools);\n                setLoading(false);\n            })\n            .catch(err => console.log(err))\n    }, []);\n\n    useEffect(()=> {\n        axios.get(`http://localhost:8000/api/tool/${tool}`)\n            .then(res => {\n                // console.log(res);\n                setThisTool(res.data.results);\n                setThisToolPrice(res.data.results.price);\n            })\n    }, []);\n\n    useEffect(() => {\n        // Create PaymentIntent as soon as the page loads\n        window.fetch(\"http://localhost:8000/create-payment-intent\", { //api/userid/toolid/\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({items: [toolPrice]})\n        })\n            .then(res => {\n                return res.json();\n            })\n            .then(data => {\n                setClientSecret(data.clientSecret);\n            });\n    }, []);\n    \n\n    const cardStyle = {\n        style: {\n            base: {\n                color: \"#32325d\",\n                fontFamily: 'Arial, sans-serif',\n                fontSmoothing: \"antialiased\",\n                fontSize: \"16px\",\n                \"::placeholder\": {\n                    color: \"#32325d\"\n                }\n            },\n            invalid: {\n                color: \"#fa755a\",\n                iconColor: \"#fa755a\"\n            }\n        }\n    };\n\n    const handleChange = async (event) => {\n        // Listen for changes in the CardElement\n        // and display any errors as the customer types their card details\n        setDisabled(event.empty);\n        setError(event.error ? event.error.message : \"\");\n    };\n\n    const handleSubmit = async ev => {\n        ev.preventDefault();\n        setProcessing(true);\n\n        const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: elements.getElement(CardElement)\n            }\n        });\n\n        if (payload.error) {\n            setError(`Payment failed ${payload.error.message}`);\n            setProcessing(false);\n        } else {\n            setError(null);\n            setProcessing(false);\n            setSucceeded(true);\n        }\n    };\n\n    // console.log(toolPrice);\n\n    if (loading) {\n        return (\n            <p>Loading....</p>\n        )\n    }\n\n\n    return (\n        <>\n        <div>\n            <Button style={{marginRight: \"5px\"}} color=\"primary\" variant=\"outlined\" onClick={e => navigate(`/homepage`)}>Home</Button>\n            <Button color=\"primary\" variant=\"outlined\" onClick={e => navigate(`/user/${thisUser._id}`)}>{thisUser.firstName}'s details page</Button>\n            <h3>Confirmation</h3>\n            <Card className={classes.root} variant=\"outlined\">\n                <CardContent>\n                    <Typography variant=\"body2\" component=\"p\">\n                    You are about to rent the {thisTool.type}\n                    </Typography>\n                </CardContent>\n                </Card>\n            <p>You are about to rent the {thisTool.type}</p>\n            <p>from {thisUser.firstName} {thisUser.lastName}</p>\n            <p>for ${thisTool.price} a day.</p>\n            <br/>\n            <h4>If this is correct, please enter your card information below</h4>\n        <form id=\"payment-form\" class=\"form\" onSubmit={handleSubmit}>\n            <input type=\"text\" class=\"input\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder={thisUser.email} />\n            <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n            <button disabled={processing || disabled || succeeded} id=\"submit\" class=\"button\">\n                <span id=\"button-text\">\n                    {processing ? (\n                        <div className=\"spinner\" id=\"spinner\"></div>\n                    ) : (\n                        \"Pay now\"\n                    )}\n                </span>\n            </button>\n            {/* Show any error that happens when processing the payment */}\n            {error && (\n                <div className=\"card-error\" role=\"alert\">\n                    {error}\n                </div>\n            )}\n            {/* Show a success message upon completion */}\n            <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n                Payment succeeded, see the result in your\n                <a href={`https://dashboard.stripe.com/test/payments`}>{\" \"} Stripe dashboard.</a> \n                Refresh the page to pay again.\n            </p>\n        </form>\n        </div>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}