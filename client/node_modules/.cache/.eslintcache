[{"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/index.js":"1","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/reportWebVitals.js":"2","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/App.js":"3","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Connect.js":"4","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Main.js":"5","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/CheckoutForm2.js":"6","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/LoginRegister.js":"7","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Payments.js":"8","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/User/UserEdit.js":"9","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/User/UserDetail.js":"10","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Tool/ToolDetail.js":"11","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Tool/ToolEdit.js":"12","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Review/ReviewDetail.js":"13","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Tool/ToolCreate.js":"14","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/User/UserCreate.js":"15","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Review/ReviewCreate.js":"16","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Review/ReviewEdit.js":"17","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/MapOne.js":"18","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/CheckoutForm.js":"19","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/components/Chat.js":"20"},{"size":457,"mtime":1617345397000,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1617345397000,"results":"23","hashOfConfig":"22"},{"size":2102,"mtime":1617350151328,"results":"24","hashOfConfig":"22"},{"size":1413,"mtime":1617357589612,"results":"25","hashOfConfig":"22"},{"size":3286,"mtime":1617353106011,"results":"26","hashOfConfig":"22"},{"size":1347,"mtime":1617345397000,"results":"27","hashOfConfig":"22"},{"size":8079,"mtime":1617347306264,"results":"28","hashOfConfig":"22"},{"size":3621,"mtime":1617345397000,"results":"29","hashOfConfig":"22"},{"size":4504,"mtime":1617350778228,"results":"30","hashOfConfig":"22"},{"size":6449,"mtime":1617372603890,"results":"31","hashOfConfig":"22"},{"size":178,"mtime":1617345397000,"results":"32","hashOfConfig":"22"},{"size":164,"mtime":1617345397000,"results":"33","hashOfConfig":"22"},{"size":1386,"mtime":1617345397000,"results":"34","hashOfConfig":"22"},{"size":3826,"mtime":1617351834700,"results":"35","hashOfConfig":"22"},{"size":3178,"mtime":1617345397000,"results":"36","hashOfConfig":"22"},{"size":3247,"mtime":1617352450583,"results":"37","hashOfConfig":"22"},{"size":183,"mtime":1617345397000,"results":"38","hashOfConfig":"22"},{"size":12719,"mtime":1617345397000,"results":"39","hashOfConfig":"22"},{"size":6320,"mtime":1617379871583,"results":"40","hashOfConfig":"22"},{"size":5437,"mtime":1617357946346,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18pdyzi",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"44"},"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/index.js",[],["95","96"],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/reportWebVitals.js",[],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/App.js",["97"],"import { Router } from '@reach/router';\nimport React from 'react';\nimport './App.css';\n\nimport Main from './views/Main';\nimport Connect from './views/Connect';\nimport Payments from './views/Payments';\nimport LoginRegister from './views/LoginRegister';\nimport CheckoutForm2 from './views/CheckoutForm2';\nimport img from './Neighbourly.PNG';\nimport { Box } from '@material-ui/core';\n\n// Create\nimport UserCreate from './views/User/UserCreate';\nimport ToolCreate from './views/Tool/ToolCreate';\nimport ReviewCreate from './views/Review/ReviewCreate';\n//Detail\nimport UserDetail from './views/User/UserDetail';\nimport ToolDetail from './views/Tool/ToolDetail';\nimport ReviewDetail from './views/Review/ReviewDetail';\n//Edit\nimport UserEdit from './views/User/UserEdit';\nimport ToolEdit from './views/Tool/ToolEdit';\nimport ReviewEdit from './views/Review/ReviewEdit';\n\n\nfunction App(props) {\n    return ( \n    < div className = \"App\">\n        <div>\n            <Box letterSpacing={3}>\n            <img src={img} style={{width: '50px', height: '50px', display: 'inline-block', verticalAlign: 'middle'}}/>\n            <h1 style={{display: 'inline-block', verticalAlign: 'middle'}}>Neighborly</h1> \n            </Box>\n        </div>\n        {/* <Link to = { `/homepage` } > Back to Home </Link> <br/> */}\n        <Router >\n            <LoginRegister path = \"/\"/>\n            <Main path = \"/homepage\"/>\n            <UserCreate path = \"/user/new\" />\n            <ToolCreate path=\"/user/:id/new_tool\"/>\n            <ReviewCreate path=\"/user/:id/new_review\"/>\n\n            <UserEdit path = \"/user/:id/edit\" />\n            <ToolEdit path = \"/user/:id/tool/edit\" />\n            <ReviewEdit path = \"/user/:id/review/edit\" />\n\n            <UserDetail path = \"/user/:id\" />\n            <ToolDetail path = \"/user/:id/tool\"/>\n            <ReviewDetail path = \"/user/:id/review/:id\"/>\n\n            <Connect path = \"/user/:id/connect\"/>\n            <Payments path= \"/user/:id/payments\"/>\n            <CheckoutForm2 path = \"/user/:_id/tool/:tool_id/checkout\"/>\n        </Router>\n        </div>\n    );\n}\n\nexport default App;","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Connect.js",["98","99","100","101","102"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\nimport Chat from '../components/Chat';\nimport { Button } from '@material-ui/core';\n\n\nconst Connect = (props) => {\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    // const [address, setAddress] = useState(\"\");\n    const { id } = props;\n    const [user, setUser] = useState({});\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/user/` + id)\n            .then(res => {\n                console.log(res.data)\n                setUser(res.data.user);\n                setFirstName(res.data.user.firstName);\n                setLastName(res.data.user.lastName);\n                // setAddress(res.data.user.address);\n                // setType(res.data.user.type);\n                // setDescription(res.data.user.description);\n                // setPrice(res.data.user.price);\n                setLoaded(true);\n            })\n            .catch(err => console.log(err.message))\n    }, []);\n\n    return (\n        <div>\n            <Button color=\"primary\" variant=\"outlined\" onClick={e => navigate(`/homepage`)}>Home</Button>\n            <h3>Send a Message to {user.firstName} {user.lastName}</h3>\n            <Chat id={id}/>\n        </div>\n    )\n}\n\nexport default Connect\n\n","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Main.js",["103","104","105"],"import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\nimport { Table, TableBody, TableCell, TableHead, TableRow, Button } from '@material-ui/core';\r\n\r\nexport default props => {\r\n    const [allusers, setAllUsers] = useState([]);\r\n    const [tools, setTools] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        Axios.get(`http://localhost:8000/api/user`)\r\n            .then(res => {\r\n                console.log(\"**********\", res)\r\n                setAllUsers(res.data.results)\r\n                setLoading(false)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, []);\r\n\r\n    if(loading){\r\n        return(\r\n            <p>Loading....</p>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Button variant=\"outlined\" onClick={e => navigate(`/`)}>Logout</Button>\r\n            {/* < h1 > These users are looking for share tools</h1> */}\r\n            {/* <Link to=\"/user/new\" > Add a user to the list </Link> */}\r\n            <h3 style={{textAlign: 'left'}}>Manage Your Tools:</h3>\r\n            <center><Table className=\"table table-danger col-8 mx-auto\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell> Placeholder </TableCell>\r\n                        <TableCell> Placeholder </TableCell>\r\n                        <TableCell> Placeholder </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                </TableBody>\r\n            </Table></center>\r\n            <h3 style={{textAlign: 'left'}}>Available Tools:</h3>\r\n            <center><Table className=\"table table-danger col-8 mx-auto\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell> Full Name </TableCell>\r\n                        <TableCell> Type </TableCell>\r\n                        <TableCell> Actions </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {\r\n                allusers.map((user, index) => {\r\n                    return (\r\n                        <TableRow key={index}>\r\n                            <TableCell> {user.firstName} {user.lastName} </TableCell>\r\n                            <TableCell> {user?.tools?.type} </TableCell>\r\n                            <TableCell>\r\n                                <Button style={{marginRight: '5px'}} variant=\"outlined\" color=\"primary\" onClick={e => navigate(`/user/${user._id}`)}> Details </Button>\r\n                                <Button style={{marginRight: '5px'}} variant=\"outlined\" color=\"primary\" onClick={e => navigate(`/user/${user._id}/edit`)}> Edit </Button>\r\n                                <Button style={{marginRight: '5px'}} variant=\"outlined\" color=\"primary\" onClick={e => navigate(`/user/${user._id}/connect`)}> Connect </Button>\r\n                                <Button variant=\"outlined\" color=\"primary\" onClick={e => navigate(`/user/${user._id}/new_tool`)}> Add Tool </Button>\r\n                            </TableCell>\r\n                        </TableRow>)\r\n                })\r\n                }\r\n                </TableBody>\r\n            </Table></center>\r\n        </div>\r\n    )\r\n}","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/CheckoutForm2.js",["106","107","108"],"import React, { useState, useEffect } from 'react';\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport CheckoutForm from './CheckoutForm';\nimport axios from 'axios';\n\nconst promise = loadStripe(\"pk_test_51IalToAQmXzgarKriNlG0enhbeYqakTPb3e8GyHE6mbNLEIZMACg8k5J0Ul8GPk9nFEsbuyBAUzhCMF5AELLp0CZ003isiZgwB\");\n\nfunction CheckoutForm2(props) {\n    // const {userId, toolsId} = props;\n    // console.log(userId);\n    // console.log(toolsId);\n    const [user, setUser] = useState(props._id)\n    const [tool, setTool] = useState(props.tool_id)\n    const [toolPrice, setToolPrice] = useState(0)\n    const [loading, setLoading] = useState(true);\n    console.log(user);\n    console.log(tool);\n\n    useEffect(()=> {\n        axios.get(`http://localhost:8000/api/tool/${tool}/price`)\n            .then(res => {\n                console.log(res);\n                setToolPrice(res.data.results);\n                setLoading(false);\n            })\n    }, []);\n\n    if(loading){\n        return (\n            <p>Loading....</p>\n        )\n    }\n    // const { props } = props;\n    return (\n        <div>\n            <Elements stripe={promise}>\n                <CheckoutForm props={props} user={user} tool={tool} toolPrice={toolPrice}/>\n            </Elements>\n        </div>\n    )\n}\n\nexport default CheckoutForm2\n","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/LoginRegister.js",["109","110","111","112","113","114","115"],"import React, { useState, Component } from 'react';\nimport { navigate } from '@reach/router';\n// import Map from './Map';\nimport MapOne from './MapOne';\n// import GoogleFileMap from './GoogleFileMap';\n// import MapForm from './MapForm';\n\nimport {\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    Checkbox,\n    Select,\n    Button\n} from '@material-ui/core';\nimport axios from \"axios\";\nconst styles = {\n    paper: {\n        width: \"12rem\", padding: \"1rem\", display: \"inline-block\", verticalAlign: 'text-top'\n    },\n    input: {\n        marginBottom: \"1rem\"\n    },\n    button: {\n        width: \"50%\"\n    }\n}\nexport default  (props)=> {\n    // *****************\n    const{user, Users}=props;\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    // const [userName, setUserName]= useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [logEmail, setLogEmail] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [logPassword, setLogPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n    const [errors, setErrors] = useState({});\n\n// ***********************************Login********************************************\n        function validateForm() {\n            return email.length > 0 && password.length > 0;\n        };\n\n        function handleSubmit(event) {\n            event.preventDefault();\n            axios.post('http://localhost:8000/api/user/login',{\n                logEmail,\n                logPassword\n            })\n                .then(response => {\n                    console.log(response);\n                    if (response.data.errors) {\n                        setErrors(response.data.errors.errors)\n                    } else { navigate(\"/homepage\") }\n                })\n                .catch(err => console.log(err))\n        }\n// ******************************************************************************\n    // {console.log(\"**************************\")}\n    const onSubmitHandler = e => {\n        e.preventDefault();\n            axios.post('http://localhost:8000/api/user', {\n                firstName,\n                lastName,\n              // userName,\n                email,\n                address,\n                password,\n                confirmPassword\n            })\n            .then(response=> {\n                if (response.data.errors){\n                    console.log(\"There is an error\");\n                    setErrors(response.data.errors)\n                } else {\n                    console.log(response)\n                    console.log({ msg: \"success!\", user: response})\n                    navigate(\"/homepage\")\n                }\n            })\n            .catch(err => console.log(err))\n        };\n        // ********************************************************** Google MAP API******************************\n        // function initMap() {\n        //         axios.get (`https://maps.google.com/?cid=10281119596374313554`,)\n        //     const map = new google.maps.Map(document.getElementById(\"map\"), {\n        //         zoom: 8,\n        //         center: { lat: 35.717, lng: 139.731 },\n        //     });\n        // }\n\n// function myMap() {\n    //     var mapProp = {\n        //         axios.get(`https://maps.google.com/?cid=10281119596374313554`)\n        //                 const map = new google.maps.Map(document.getElementById(\"googleMap\"), mapProp);\n        //         center: new google.maps.LatLng(51.508742, -0.120850),\n        //         zoom: 5,\n        //     };\n        // }\n        \n        // ************************************************************************************************************\n        return (\n            <div style={{margin: '0 auto'}}>\n        {/* *************************** */}\n{/* <Map/> */}\n\n        {/* <MapForm google={props.google}\n            center={{ lat: 47.628934, lng: -122.343181 }}\n            height='300px'\n        zoom={15}/> */}\n        {/* <GoogleFileMap /> */}\n        {/* <MapOne /> */}\n        {/* *************************** */}\n\n        <div elevation={1} style={styles.paper}>\n            <h2>Register{JSON.stringify(firstName)}</h2>\n            <form onSubmit = {onSubmitHandler}>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>First Name</InputLabel>\n                    <OutlinedInput type=\"text\" name=\"firstName\" onChange={(e) => setFirstName(e.target.value)}\n                            value={firstName}/>\n                </FormControl>\n                <span > {errors.firstName ? errors.firstName.message : ''} </span>\n                    <FormControl variant=\"outlined\" style={styles.input}>\n                        <InputLabel>Last Name</InputLabel>\n                    <OutlinedInput type=\"text\" name=\"lastName\" onChange={(e) => setLastName(e.target.value)}\n                            value={lastName}/>\n                    </FormControl>\n                <span > {errors.lastName ? errors.lastName.message : ''} </span>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>E-mail</InputLabel>\n                    <OutlinedInput type=\"text\" name=\"email\" onChange={(e) => setEmail(e.target.value)}\n                        value={email} />\n                </FormControl>\n                <span > {errors.email ? errors.email.message : ''} </span>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Password</InputLabel>\n                    <OutlinedInput type=\"password\" name=\"password\" onChange={(e) => setPassword(e.target.value)}\n                            value={password} />\n                </FormControl>\n                <span > {errors.password ? errors.password.message : ''} </span>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel> Confirm Password</InputLabel>\n                    <OutlinedInput type=\"password\" name=\"Confirmpassword\" onChange={(e)=> setConfirmPassword(e.target.value)} value={confirmPassword}/>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Address</InputLabel>\n                    <OutlinedInput type=\"text\" name=\"address\" onChange={(e) => setAddress(e.target.value)} value={address} />\n                </FormControl>\n                <span > {errors.address ? errors.address.message : ''} </span>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">Register\n                </Button>\n            </form>\n        </div>\n        <div elevation={1} style={styles.paper}>\n            <h2>Login</h2>\n            <form onSubmit={handleSubmit}>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Email</InputLabel>\n                    <OutlinedInput type=\"email\" name=\"email\" onChange={(e) => setLogEmail(e.target.value)} value={logEmail}/>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Password</InputLabel>\n                    <OutlinedInput type=\"password\" name=\"password\" onChange={(e) => setLogPassword(e.target.value)}value={logPassword}/>\n                </FormControl>\n                {/* <FormControl>\n                    <Checkbox label='I agree to the Terms and Conditions'/>\n                </FormControl> */}\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Login\n                </Button>\n            </form>\n                <div style={{margin: '5px', width: '150%', marginTop:'10px', height: '100%', padding:'2px'}}>\n                <MapOne \n                            google={props.google}\n                            center={{ lat: 47.628933, lng: -122.343181}}\n                            height='300px'\n                            zoom={15}/>\n                            </div>\n        </div>\n    </div>\n    )\n}\n\n","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Payments.js",[],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/User/UserEdit.js",["116","117","118","119","120","121","122","123"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\nimport {\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    Checkbox,\n    Select,\n    Button\n} from '@material-ui/core';\n\nconst styles = {\n    paper: {\n        width: \"12rem\", padding: \"1rem\", display: \"inline-block\", verticalAlign: 'text-top'\n    },\n    input: {\n        marginBottom: \"1rem\"\n    },\n    button: {\n        width: \"50%\"\n    }\n}\n\n\nexport default props => {\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [type, setType] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(0);\n    const [loaded, setLoaded] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [user, setUser] = useState({});\n\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/user/` + props.id)\n            .then(res => {\n                setFirstName(res.data.user.firstName);\n                setLastName(res.data.user.lastName);\n                setAddress(res.data.user.address);\n                setType(res.data.user.type);\n                setDescription(res.data.user.description);\n                setPrice(res.data.user.price)\n                setLoaded(true);\n            })\n    }, []);\n\n    const updateUser = e => {\n        e.preventDefault();\n        axios.put(`http://localhost:8000/api/user/` + props.id, {\n            firstName,\n            lastName,\n            address,\n            type,\n            description,\n            price\n        })\n            .then(res => {\n                console.log(res);\n                if (res.data.errors) {\n                    setErrors(res.data.errors.errors)\n                } else { navigate(\"/homepage\") }\n\n            })\n            .catch(err => console.log(err))\n    }\n    return (\n        <div>\n            <Button color=\"primary\" variant=\"outlined\" onClick={e => navigate(`/homepage`)}>Home</Button>\n            <h3> Edit {firstName} {lastName} </h3>\n\n            <div elevation={1} style={styles.paper}>\n                <form onSubmit={updateUser} >\n                    <FormControl variant=\"outlined\" style={styles.input}>\n                        <InputLabel>First Name</InputLabel>\n                        <OutlinedInput type=\"text\" name=\"firstName\" onChange={(e) => setFirstName(e.target.value)}\n                                value={firstName}/>\n                    <span>{errors.firstName ? errors.firstName.message : ''}</span>\n                    </FormControl>\n                    <FormControl variant=\"outlined\" style={styles.input}>\n                        <InputLabel>Last Name</InputLabel>\n                        <OutlinedInput type=\"text\" name=\"lastName\" onChange={(e) => setLastName(e.target.value)}\n                                value={lastName}/>\n                    <span>{errors.lastName ? errors.lastName.message : ''}</span>\n                    </FormControl>\n                    <FormControl variant=\"outlined\" style={styles.input}>\n                        <InputLabel>Address</InputLabel>\n                        <OutlinedInput type=\"text\" name=\"address\" onChange={(e) => setAddress(e.target.value)}\n                                value={address}/>\n                    </FormControl>\n                    {/* <label htmlFor=\"Type\">  Type: </label>\n                    <input type=\"text\" name=\"type\" onChange={(e) => setType(e.target.value)} value={type}/>\n                    <span > {errors.type ? errors.type.message : ''} </span> \n                    <br/>\n                    \n                    <label htmlFor=\"Description\" >  Description: </label><br/>\n                    <input type=\"text\" name=\"description\" onChange={(e) => setDescription(e.target.value)} value={description}/><br/>\n                    <span > {errors.description ? errors.description.message : ''} </span>\n                    <br/>\n\n                    <label htmlFor=\"price\"> Price: </label><br/>\n                    <input type=\"number\" name=\"price\" onChange={(e) => setPrice(e.target.value)} value={price}/>\n                    <span > {errors.price ? errors.price.message : ''} </span>\n                    <br/> */}\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Edit User\n                </Button>\n                </form>\n            </div>\n        </div>\n    )\n\n\n}","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/User/UserDetail.js",["124","125","126","127","128","129","130","131"],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Tool/ToolDetail.js",[],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Tool/ToolEdit.js",[],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Review/ReviewDetail.js",["132","133","134","135","136","137","138","139","140"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\nconst ReviewCreate = (props) => {\n    const { id } = props;\n    const [name, setName] = useState(\"\");\n    const [rating, setRating] = useState(0);\n    const [review, setReview] = useState(\"\");\n    const [user, setUser] = useState({});\n    // const [loading, setLoading] = useState(true);\n    const [errors, setErrors] = useState({});\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/review/${id}`)\n            .then(res => {\n                console.log(res.data)\n                setUser(res.data.user);\n                setReview(res.data.results);\n                // setLoading(false);\n            })\n            .catch(err => console.log(err.message))\n    }, []);\n\n    // if(loading){\n    //     return(\n    //         <p>Loading....</p>\n    //     )\n    // }\n    return (\n\n        <div>\n            <h1> Details on your review for this user</h1>\n            <Link to={`/homepage`}> Home </Link><br />\n                    <p><label htmlFor=\"name\">  Reviewer's Name: {review.name}</label></p><br />\n                    <p><label htmlFor=\"rating\" >  User Rating: {review.rating}</label></p><br />\n                    <p><label htmlFor=\"review\" >  Review: {review.review}</label></p><br />\n        </div>\n    )\n}\n\nexport default ReviewCreate;","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Tool/ToolCreate.js",["141","142","143","144","145","146"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\nimport {\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    Checkbox,\n    Select,\n    Button\n} from '@material-ui/core';\n\nconst styles = {\n    paper: {\n        width: \"12rem\", padding: \"1rem\", display: \"inline-block\", verticalAlign: 'text-top'\n    },\n    input: {\n        marginBottom: \"1rem\"\n    },\n    button: {\n        width: \"50%\"\n    }\n}\n\nconst ToolCreate = (props) => {\n    const [type, setType] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(0);\n    const [startDate, setStartDate] = useState(\"\");\n    const [endDate, setEndDate] = useState(\"\");\n    const [errors, setErrors] = useState({});\n    const [user, setUser] = useState({});\n    const { id }=props;\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        //make a post request to create a new tool`\n        axios.post(`http://localhost:8000/api/user/${id}/tool`, {\n            type,\n            description,\n            price,\n            startDate,\n            endDate\n        })\n            .then(res => {\n                console.log(res);\n                if (res.data.message == \"error\") {\n                    setErrors(res.data.errors.errors.tools.errors)\n                } else { navigate(`/user/${id}`) }\n            })\n            .catch(err => console.log(err))\n    }\n\n    console.log(errors);\n    return (\n        <div>\n            <Button color=\"primary\" variant=\"outlined\" onClick={e => navigate(`/homepage`)}>Home</Button>\n            <h3> Create a tool for rental! </h3>\n            <div elevation={1} style={styles.paper}>\n            <form onSubmit={onSubmitHandler} >\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Type</InputLabel>\n                    <OutlinedInput type=\"text\" name=\"type\" onChange={(e) => setType(e.target.value)} value={type}/>\n                <span> {errors.type ? errors.type.message : ''} </span>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Description</InputLabel>\n                    <OutlinedInput type=\"text\" name=\"description\" onChange={(e) => setDescription(e.target.value)} value={description}/>\n                    <span> {errors.description ? errors.description.message : ''} </span>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Daily Price (in $)</InputLabel>\n                    <OutlinedInput type=\"number\" name=\"price\" onChange={(e) => setPrice(e.target.value)} value={price}/>\n                    <span> {errors.price ? errors.price.message : ''} </span>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <span>When will the tool be available:</span>\n                    <OutlinedInput type=\"date\" name=\"startDate\" onChange={(e) => setStartDate(e.target.value)} value={startDate}/>\n                    <span> {errors.startDate ? errors.startDate.message : ''} </span>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <span>When will you need the tool back by:</span>\n                    <OutlinedInput type=\"date\" name=\"endDate\" onChange={(e) => setEndDate(e.target.value)} value={endDate}/>\n                    <span> {errors.endDate ? errors.endDate.message : ''} </span>\n                </FormControl>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Add New Tool\n                </Button>\n            </form>\n            </div>\n        </div>\n    )\n}\n\nexport default ToolCreate;","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/User/UserCreate.js",["147"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\n\nexport default (props) => {\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    // const [type, setType] = useState(\"\");\n    // const [description, setDescription] = useState(\"\");\n    // const [price, setPrice] = useState(0);\n    const [errors, setErrors] = useState({})\n\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        //make a post request to create a new person\n        axios.post('http://localhost:8000/api/user', {\n            firstName,\n            lastName,\n            address,\n            // type,\n            // description,\n            // price\n        })\n            .then(res => {\n                console.log(res);\n                if (res.data.errors) {\n                    setErrors(res.data.errors)\n                } else { navigate(\"/homepage\") }\n            })\n            .catch(err => console.log(err))\n    }\n    return (\n        <div>\n            <h3> Know a user needing a home ? </h3>\n            <Link to={`/homepage`} > back to home </Link><br />\n            <form onSubmit={onSubmitHandler} ><br/>\n                <label htmlFor=\"First Name\" >First Name: </label>\n                <input type=\"text\" name=\"firstName\" onChange={(e) => setFirstName(e.target.value)}\n                    value={firstName} /><br />\n                {/* { / * If I have an error display it it isfor validation * / }  */}\n                <span> {errors.firstName ? errors.firstName.message : ''} </span>\n                <br/>\n\n                <label htmlFor=\"Last Name\" > Last Name: </label>\n                <input type=\"text\" name=\"lastName\" onChange={(e) => setLastName(e.target.value)}\n                    value={lastName} /><br/>\n                <span> {errors.lastName ? errors.lastName.message : ''} </span>\n                <br/>\n\n                <label htmlFor=\"address\" > Address: </label>\n                <input type=\"text\" name=\"address\" onChange={(e) => setAddress(e.target.value)}\n                    value={address} />\n                <br/>\n\n                {/* <label htmlFor=\"Type\">  Type: </label>\n                <input type=\"text\" name=\"type\" onChange={(e) => setType(e.target.value)} value={type} />\n                <span > {errors.type ? errors.type.message : ''} </span>\n                <br/>\n\n                <label htmlFor=\"Description\" >  Description: </label><br/>\n                <input type=\"text\" name=\"description\" onChange={(e) => setDescription(e.target.value)} value={description} /><br />\n                <span> {errors.description ? errors.description.message : ''} </span>\n                <br/>\n\n                <label htmlFor=\"price\"> Price: </label><br />\n                <input type=\"number\" name=\"price\" onChange={(e) => setPrice(e.target.value)} value={price} />\n                <span > {errors.price ? errors.price.message : ''} </span>\n                <br/> */}\n                <br/>\n                <input type=\"submit\" value=\"Add New User\"/>\n            </form>\n            </div>\n    )\n}","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Review/ReviewCreate.js",["148","149","150","151"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\nimport {\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    Checkbox,\n    Select,\n    Button, \n    TextField\n} from '@material-ui/core';\n\nconst styles = {\n    paper: {\n        width: \"12rem\", padding: \"1rem\", display: \"inline-block\", verticalAlign: 'text-top'\n    },\n    input: {\n        marginBottom: \"1rem\"\n    },\n    button: {\n        width: \"50%\"\n    }\n}\n\n\nconst ReviewCreate = (props) => {\n    const [name, setName] = useState(\"\");\n    const [rating, setRating] = useState(\"\");\n    const [review, setReview] = useState(\"\");\n    // const [description, setDescription] = useState(\"\");\n    // const [price, setPrice] = useState(0);\n    const [errors, setErrors] = useState({});\n    // const [user, setUser] = useState({});\n    const { id } = props;\n\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        //make a post request to create a new review\n        axios.post(`http://localhost:8000/api/user/${id}/review`, {\n            name,\n            rating,\n            review\n            // address,\n            // // type,\n            // // description,\n            // // price\n        })\n            .then(res => {\n                console.log(res);\n                if (res.data.message == \"error\") {\n                    setErrors(res.data.errors.errors.reviews.errors)\n                } else { navigate(\"/homepage\") }\n            })\n            .catch(err => console.log(err))\n    }\n\n    return (\n\n        <div>\n            <Button color=\"primary\" variant=\"outlined\" onClick={e => navigate(`/homepage`)}>Home</Button>\n            <h3> Create a review for this user</h3>\n            <div elevation={1} style={styles.paper}>\n            <form onSubmit={onSubmitHandler}>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>Reviewer's Name</InputLabel>\n                    <OutlinedInput type=\"text\" name=\"name\" onChange={(e) => setName(e.target.value)} value={name}/>\n                <span> {errors.name ? errors.name.message : ''} </span>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <InputLabel>User Rating</InputLabel>\n                    <OutlinedInput type=\"number\" name=\"rating\" onChange={(e) => setRating(e.target.value)} value={rating}/>\n                <span> {errors.rating ? errors.rating.message : ''} </span>\n                </FormControl>\n                <FormControl variant=\"outlined\" style={styles.input}>\n                    <TextField id=\"outlined-basic\" label=\"Review\" variant=\"outlined\" type=\"text\" name=\"review\" onChange={(e) => setReview(e.target.value)} value={review}/>\n                <span> {errors.review ? errors.review.message : ''} </span>\n                </FormControl>\n                {/* <textarea name=\"review\" id=\"review\" cols=\"50\" rows=\"10\" placeholder=\"Please tell us about your experience...\"></textarea><br/> */}\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Submit Review\n                </Button>\n            </form>\n            </div>\n        </div>\n\n    )\n}\n\nexport default ReviewCreate;","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/Review/ReviewEdit.js",[],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/MapOne.js",["152"],"import React,{Component} from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker, GoogleApiWrapper,  } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\n// import Autocomplete from 'react-google-autocomplete';\nGeocode.setApiKey(\"AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\");\nGeocode.enableDebug();\nclass MapOne extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            address: '',\n            city: '',\n            area: '',\n            state: '',\n            mapPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            },\n            markerPosition: {\n                lat: this.props.center.lat,\n                lng: this.props.center.lng\n            }\n        }\n    }\n    /**\n      * Get the current address from the default map position and set those values in the state\n      */\n    componentDidMount() {\n        Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng)\n        .then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n\n                console.log('city', city, area, state);\n\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n    /**\n      * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n      *\n      * @param nextProps\n      * @param nextState\n      * @return {boolean}\n      */\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.markerPosition.lat !== this.props.center.lat ||\n            this.state.address !== nextState.address ||\n            this.state.city !== nextState.city ||\n            this.state.area !== nextState.area ||\n            this.state.state !== nextState.state\n        ) {\n            return true\n        } else if (this.props.center.lat === nextProps.center.lat) {\n            return false\n        }\n    }\n    /**\n      * Get the city and set the city input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n    getCity = (addressArray) => {\n        let city = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n                city = addressArray[i].long_name;\n                return city;\n            }\n        }\n    };\n    /**\n      * Get the area and set the area input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n    getArea = (addressArray) => {\n        let area = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            if (addressArray[i].types[0]) {\n                for (let j = 0; j < addressArray[i].types.length; j++) {\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                        area = addressArray[i].long_name;\n                        return area;\n                    }\n                }\n            }\n        }\n    };\n    /**\n      * Get the address and set the address input value to the one selected\n      *\n      * @param addressArray\n      * @return {string}\n      */\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };\n    /**\n      * And function for city,state and address input\n      * @param event\n      */\n    onChange = (event) => {\n        // console.log(state)\n        this.setState({ [event.target.name]: event.target.value });\n\n    };\n    /**\n      * This Event triggers when the marker window is closed\n      *\n      * @param event\n     // ********************************************************\n\n     // ***************************************\n      */\n    onInfoWindowClose = (e) => {\n    };\n    // *****************************************\n    onMarkerDragEnd = (event) => {\n        let newLat = event.latLng.lat(),\n            newLng = event.latLng.lng();\n\n\n        Geocode.fromLatLng(newLat, newLng).then(\n            response => {\n                const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    area = this.getArea(addressArray),\n                    state = this.getState(addressArray);\n                this.setState({\n                    address: (address) ? address : '',\n                    area: (area) ? area : '',\n                    city: (city) ? city : '',\n                    state: (state) ? state : '',\n                    markerPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n                    mapPosition: {\n                        lat: newLat,\n                        lng: newLng\n                    },\n\n\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    };\n\n    // ******************************************\n    /**\n        * When the user types an address in the search box we need to install and import react-google-autocomplete\n        * @param place\n        */\n    onPlaceSelected = (place) => {\n        // console.log('plc', place);\n        const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n        // Set these values in the state.\n        this.setState({\n            address: (address) ? address : '',\n            area: (area) ? area : '',\n            city: (city) ? city : '',\n            state: (state) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n    // ***************************************\n    render() {\n        const AsyncMap = withScriptjs(\n            withGoogleMap(\n                props => (\n                    <GoogleMap\n                        style={{ paddingLeft: '10px',\n                            marginTop: '2px'\n                    }}\n                        google={this.props.google}\n                    defaultZoom={this.props.zoom}\n                    defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n                    >\n                        {/* <InfoWindow onClose={this.onInfoWindowClose}>\n                        </InfoWindow> */}\n                    {/* // ************************************************************************************************* */}\n                    <InfoWindow\n                            onClose={this.onInfoWindowClose}\n                            position={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}>\n                            <div>\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\n                            </div>\n                            </InfoWindow>\n                        <Marker google={this.props.google}\n                            name={'Dolores park'}\n                            draggable={true}\n                            onDragEnd={this.onMarkerDragEnd}\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n                        />\n                        <Marker/>\n                        {/* For Auto complete Search Box */}\n                        <Autocomplete\n                            // style={{\n                            //     width: '50%',\n                            //     height: '20px',\n                            //     paddingLeft: '10px',\n                            //     marginTop: '2px',\n                            //     marginBottom: '100px'\n                            // }}\n                            onPlaceSelected={this.onPlaceSelected}\n                            types={['(regions)']}/>\n\n                            </GoogleMap>\n                        )\n                    )\n                );\n                \n                let map;\n                if (this.props.center.lat !== undefined) {\n                    map = <div>\n                <div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '5px', marginRight: '2px'}}>\n                                <label htmlFor=\"\">Area</label>\n                                <input type=\"text\" name=\"area\" className=\"form-control\" onChange={this.onChange}  defaultValue={this.state.city} />\n                    </div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '5px', marginRight: '2px' }}>\n                        <label htmlFor=\"\">City</label>\n                                <input type=\"text\" name=\"city\" className=\"form-control\" onChange={this.onChange} defaultValue={this.state.area} />\n                    </div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '2px', marginRight: '2px' }} >\n                        <label htmlFor=\"\">State</label>\n                                <input type=\"text\" name=\"state\" className=\"form-control\" onChange={this.onChange}  defaultValue={this.state.state} />\n                    </div>\n                            <div className=\"form-group\" style={{ marginTop: '5px', padding: '2px' }}>\n                        <label htmlFor=\"\">Address</label>\n                                <input type=\"text\" name=\"address\" className=\"form-control\" onChange={this.onChange}  defaultValue={this.state.address} />\n                                {/* <button onC >Search</button> */}\n                    </div >\n                </div >\n                <AsyncMap\n                            // googleMapURL=\" https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\"\n                \n                    // googleMapURL= \"https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Museum%20of%20Contemporary%20Art%20Australia&inputtype=textquery&fields=photos,formatted_address,name,rating,opening_hours,geometry&key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo\"\n                        // googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&ll=47.419731,-122.088715&spn=0.004250,0.011579&t=h&iwloc=A&hl=en\"\n                            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&libraries=geometry,drawing,places,address&libraries=places\"\n                            // googleMapURL= 'https://maps.googleapis.com/maps/api/geocode/json?address=${Anfield}%20Rd,%20${Anfield},%20${Liverpool}%20${L4%200TH},%20${United}%20${Kingdom}&key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo'\n                            // googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAKg4xpvUO6EX3FJpOc-CzxfxZw4zbe3uo&libraries=places\"\n                    loadingElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                    containerElement={\n                        <div style={{ height: this.props.height }} />\n                    }\n                    mapElement={\n                        <div style={{ height: `100%` }} />\n                    }\n                />\n            </div>\n        } else {\n            map = <div style={{ height: this.props.height }} />\n        }\n        return (map)\n    }\n}\nexport default MapOne\n\n\n\n\n\n\n\n\n\n","/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/views/CheckoutForm.js",["153","154","155","156","157","158"],"/Users/kellyle/Desktop/Dojo_Assignments/MERN/Neighbourly-1-main/Neighbourly/client/src/components/Chat.js",["159","160","161","162","163"],"import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {\n    FormControl,\n    InputLabel,\n    OutlinedInput,\n    Checkbox,\n    Select,\n    TextField\n} from '@material-ui/core';\n\nconst styles = {\n    paper: {\n        width: \"12rem\", padding: \"1rem\", display: \"inline-block\", verticalAlign: 'text-top'\n    },\n    input: {\n        marginBottom: \"1rem\"\n    },\n    button: {\n        width: \"50%\"\n    }\n}\n\nconst useStyles = makeStyles({\n    root: {\n      minWidth: 275,\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)',\n    },\n    title: {\n      fontSize: 14,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n  });\n\nconst Chat = props => {\n    const { id } = props;\n    const classes = useStyles();\n    // const bull = <span className={classes.bullet}>•</span>;\n    const [socket] = useState(() => io(':8000'));\n    const [message, setMessage] = useState('');\n    const [typingStatus, setTypingStatus] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [room, setRoom] = useState(id);\n    const [user, setUser] = useState('');\n    const [startChat, setStartChat] = useState(false);\n\n    useEffect(() => {\n        return () => socket.disconnect(true);\n    }, [])\n  \n    socket.on('messageSent', data => {\n      setMessages([...messages, data]);\n      setTypingStatus('');\n    })\n  \n    socket.on('clientTyping', data => {\n      setTypingStatus(data.message);\n    })\n  \n    const submitHandler = e => {\n      e.preventDefault();\n      \n      socket.emit('sendMessage', { room, user, message });\n      setMessages([...messages, { room, user, message }])\n      setTypingStatus('');\n      setMessage('');\n    }\n  \n    const typingHandler = e => {\n      setMessage(e.target.value);\n      socket.emit('clientTyping', { room, message: `${user} is typing...`});\n    }\n  \n    const joinRoom = () => {\n        socket.emit('joinroom', room);\n        setStartChat(true);\n    }\n    return (\n        <>\n        {startChat ? \n        <>\n        <Card className={classes.root} variant=\"outlined\">\n            <CardContent>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                {typingStatus}\n                </Typography>\n                <div>\n                {\n                    messages.map( (item, i) => \n                    <Typography variant=\"body2\" component=\"p\" key={i}>{item.user}: {item.message}</Typography>\n                    )\n                }\n            </div>\n                {/* {\n                    messages.map( (item, i) => { \n                        <div key={i}>\n                        <Typography className={classes.pos} color=\"textSecondary\">\n                        {item.username}:\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">{item.message}</Typography>\n                        </div>\n                    })\n                } */}\n            </CardContent>\n        <CardActions>\n        </CardActions>\n        <div elevation={1} style={styles.paper}>\n        </div>\n    </Card>\n        <form onSubmit={submitHandler}>\n            <FormControl variant=\"outlined\" onSubmit={ submitHandler} style={styles.input}>\n                <TextField id=\"outlined-basic\" label=\"Message\" variant=\"outlined\" type=\"text\" name=\"message\" onChange={typingHandler} value={message}/>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                    Send\n                </Button>\n            </FormControl>\n        </form>\n        </>\n        :\n        <FormControl>\n            <OutlinedInput type=\"text\" name=\"user\" onChange={e => setUser(e.target.value) } placeholder=\"username\"/>\n            <Button onClick={ joinRoom } variant=\"contained\" color=\"primary\">\n                        Start Chat\n            </Button>\n        </FormControl>\n        }\n        {/* <input type=\"text\" name=\"username\" onChange={e => setUsername(e.target.value) } placeholder=\"username\"/>\n        <form onSubmit={ submitHandler }>\n        <p>{typingStatus}</p>\n                <input type=\"text\" name=\"message\" onChange={ typingHandler } value={ message }/>\n                <input type=\"submit\" value=\"Send\"/>\n            </form> */}\n            {/* <div>\n                {\n                    messages.map( (item, i) => \n                        <p key={i}>{item.username}: {item.message}</p>\n                    )\n                }\n            </div> */}\n            {/* <div>\n            <input type=\"text\" name=\"user\" onChange={e => setUser(e.target.value) } placeholder=\"username\"/>\n            <input type=\"text\" name=\"room\" placeholder=\"roomname\" onChange={ e => setRoom(e.target.value) }/>\n            <button onClick={ joinRoom }>Join Room</button>\n\n            <form onSubmit={submitHandler}>\n                <p>{typingStatus}</p>\n                <input type=\"text\" name=\"message\" onChange={ typingHandler } value={message}/>\n                <br/>\n                <input type=\"submit\" value=\"Submit\"/>\n            </form> \n        </div> */}\n        </>\n    );\n}\n\nexport default Chat",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":32,"column":13,"nodeType":"170","endLine":32,"endColumn":119},{"ruleId":"171","severity":1,"message":"172","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":14},{"ruleId":"171","severity":1,"message":"175","line":9,"column":12,"nodeType":"173","messageId":"174","endLine":9,"endColumn":21},{"ruleId":"171","severity":1,"message":"176","line":10,"column":12,"nodeType":"173","messageId":"174","endLine":10,"endColumn":20},{"ruleId":"171","severity":1,"message":"177","line":14,"column":12,"nodeType":"173","messageId":"174","endLine":14,"endColumn":18},{"ruleId":"178","severity":1,"message":"179","line":30,"column":8,"nodeType":"180","endLine":30,"endColumn":10,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":6,"column":1,"nodeType":"184","endLine":73,"endColumn":2},{"ruleId":"171","severity":1,"message":"185","line":8,"column":12,"nodeType":"173","messageId":"174","endLine":8,"endColumn":17},{"ruleId":"171","severity":1,"message":"186","line":8,"column":19,"nodeType":"173","messageId":"174","endLine":8,"endColumn":27},{"ruleId":"171","severity":1,"message":"187","line":13,"column":18,"nodeType":"173","messageId":"174","endLine":13,"endColumn":25},{"ruleId":"171","severity":1,"message":"188","line":14,"column":18,"nodeType":"173","messageId":"174","endLine":14,"endColumn":25},{"ruleId":"178","severity":1,"message":"189","line":27,"column":8,"nodeType":"180","endLine":27,"endColumn":10,"suggestions":"190"},{"ruleId":"171","severity":1,"message":"191","line":1,"column":27,"nodeType":"173","messageId":"174","endLine":1,"endColumn":36},{"ruleId":"171","severity":1,"message":"192","line":12,"column":5,"nodeType":"173","messageId":"174","endLine":12,"endColumn":13},{"ruleId":"171","severity":1,"message":"193","line":13,"column":5,"nodeType":"173","messageId":"174","endLine":13,"endColumn":11},{"ruleId":"182","severity":1,"message":"183","line":28,"column":1,"nodeType":"184","endLine":186,"endColumn":2},{"ruleId":"171","severity":1,"message":"194","line":30,"column":11,"nodeType":"173","messageId":"174","endLine":30,"endColumn":15},{"ruleId":"171","severity":1,"message":"195","line":30,"column":17,"nodeType":"173","messageId":"174","endLine":30,"endColumn":22},{"ruleId":"171","severity":1,"message":"196","line":43,"column":18,"nodeType":"173","messageId":"174","endLine":43,"endColumn":30},{"ruleId":"171","severity":1,"message":"172","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":14},{"ruleId":"171","severity":1,"message":"192","line":8,"column":5,"nodeType":"173","messageId":"174","endLine":8,"endColumn":13},{"ruleId":"171","severity":1,"message":"193","line":9,"column":5,"nodeType":"173","messageId":"174","endLine":9,"endColumn":11},{"ruleId":"182","severity":1,"message":"183","line":26,"column":1,"nodeType":"184","endLine":117,"endColumn":2},{"ruleId":"171","severity":1,"message":"177","line":33,"column":12,"nodeType":"173","messageId":"174","endLine":33,"endColumn":18},{"ruleId":"171","severity":1,"message":"194","line":35,"column":12,"nodeType":"173","messageId":"174","endLine":35,"endColumn":16},{"ruleId":"171","severity":1,"message":"187","line":35,"column":18,"nodeType":"173","messageId":"174","endLine":35,"endColumn":25},{"ruleId":"178","severity":1,"message":"197","line":49,"column":8,"nodeType":"180","endLine":49,"endColumn":10,"suggestions":"198"},{"ruleId":"171","severity":1,"message":"199","line":7,"column":8,"nodeType":"173","messageId":"174","endLine":7,"endColumn":19},{"ruleId":"182","severity":1,"message":"183","line":29,"column":1,"nodeType":"184","endLine":171,"endColumn":2},{"ruleId":"171","severity":1,"message":"200","line":31,"column":11,"nodeType":"173","messageId":"174","endLine":31,"endColumn":15},{"ruleId":"171","severity":1,"message":"201","line":35,"column":12,"nodeType":"173","messageId":"174","endLine":35,"endColumn":16},{"ruleId":"171","severity":1,"message":"202","line":36,"column":12,"nodeType":"173","messageId":"174","endLine":36,"endColumn":23},{"ruleId":"171","severity":1,"message":"203","line":37,"column":12,"nodeType":"173","messageId":"174","endLine":37,"endColumn":17},{"ruleId":"171","severity":1,"message":"204","line":40,"column":12,"nodeType":"173","messageId":"174","endLine":40,"endColumn":19},{"ruleId":"178","severity":1,"message":"179","line":60,"column":8,"nodeType":"180","endLine":60,"endColumn":10,"suggestions":"205"},{"ruleId":"171","severity":1,"message":"206","line":3,"column":16,"nodeType":"173","messageId":"174","endLine":3,"endColumn":24},{"ruleId":"171","severity":1,"message":"207","line":7,"column":12,"nodeType":"173","messageId":"174","endLine":7,"endColumn":16},{"ruleId":"171","severity":1,"message":"208","line":7,"column":18,"nodeType":"173","messageId":"174","endLine":7,"endColumn":25},{"ruleId":"171","severity":1,"message":"209","line":8,"column":12,"nodeType":"173","messageId":"174","endLine":8,"endColumn":18},{"ruleId":"171","severity":1,"message":"210","line":8,"column":20,"nodeType":"173","messageId":"174","endLine":8,"endColumn":29},{"ruleId":"171","severity":1,"message":"194","line":10,"column":12,"nodeType":"173","messageId":"174","endLine":10,"endColumn":16},{"ruleId":"171","severity":1,"message":"211","line":12,"column":12,"nodeType":"173","messageId":"174","endLine":12,"endColumn":18},{"ruleId":"171","severity":1,"message":"212","line":12,"column":20,"nodeType":"173","messageId":"174","endLine":12,"endColumn":29},{"ruleId":"178","severity":1,"message":"179","line":23,"column":8,"nodeType":"180","endLine":23,"endColumn":10,"suggestions":"213"},{"ruleId":"171","severity":1,"message":"172","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":14},{"ruleId":"171","severity":1,"message":"192","line":8,"column":5,"nodeType":"173","messageId":"174","endLine":8,"endColumn":13},{"ruleId":"171","severity":1,"message":"193","line":9,"column":5,"nodeType":"173","messageId":"174","endLine":9,"endColumn":11},{"ruleId":"171","severity":1,"message":"194","line":32,"column":12,"nodeType":"173","messageId":"174","endLine":32,"endColumn":16},{"ruleId":"171","severity":1,"message":"187","line":32,"column":18,"nodeType":"173","messageId":"174","endLine":32,"endColumn":25},{"ruleId":"214","severity":1,"message":"215","line":47,"column":38,"nodeType":"216","messageId":"217","endLine":47,"endColumn":40},{"ruleId":"182","severity":1,"message":"183","line":6,"column":1,"nodeType":"184","endLine":77,"endColumn":2},{"ruleId":"171","severity":1,"message":"172","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":14},{"ruleId":"171","severity":1,"message":"192","line":8,"column":5,"nodeType":"173","messageId":"174","endLine":8,"endColumn":13},{"ruleId":"171","severity":1,"message":"193","line":9,"column":5,"nodeType":"173","messageId":"174","endLine":9,"endColumn":11},{"ruleId":"214","severity":1,"message":"215","line":52,"column":38,"nodeType":"216","messageId":"217","endLine":52,"endColumn":40},{"ruleId":"171","severity":1,"message":"218","line":2,"column":70,"nodeType":"173","messageId":"174","endLine":2,"endColumn":86},{"ruleId":"171","severity":1,"message":"172","line":9,"column":10,"nodeType":"173","messageId":"174","endLine":9,"endColumn":14},{"ruleId":"171","severity":1,"message":"199","line":13,"column":8,"nodeType":"173","messageId":"174","endLine":13,"endColumn":19},{"ruleId":"171","severity":1,"message":"219","line":48,"column":12,"nodeType":"173","messageId":"174","endLine":48,"endColumn":25},{"ruleId":"178","severity":1,"message":"220","line":60,"column":8,"nodeType":"180","endLine":60,"endColumn":10,"suggestions":"221"},{"ruleId":"178","severity":1,"message":"189","line":69,"column":8,"nodeType":"180","endLine":69,"endColumn":10,"suggestions":"222"},{"ruleId":"178","severity":1,"message":"223","line":86,"column":8,"nodeType":"180","endLine":86,"endColumn":10,"suggestions":"224"},{"ruleId":"171","severity":1,"message":"225","line":11,"column":5,"nodeType":"173","messageId":"174","endLine":11,"endColumn":15},{"ruleId":"171","severity":1,"message":"192","line":13,"column":5,"nodeType":"173","messageId":"174","endLine":13,"endColumn":13},{"ruleId":"171","severity":1,"message":"193","line":14,"column":5,"nodeType":"173","messageId":"174","endLine":14,"endColumn":11},{"ruleId":"171","severity":1,"message":"226","line":55,"column":18,"nodeType":"173","messageId":"174","endLine":55,"endColumn":25},{"ruleId":"178","severity":1,"message":"227","line":61,"column":8,"nodeType":"180","endLine":61,"endColumn":10,"suggestions":"228"},"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'loaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["231"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'tools' is assigned a value but never used.","'setTools' is assigned a value but never used.","'setUser' is assigned a value but never used.","'setTool' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tool'. Either include it or remove the dependency array.",["232"],"'Component' is defined but never used.","'Checkbox' is defined but never used.","'Select' is defined but never used.","'user' is assigned a value but never used.","'Users' is assigned a value but never used.","'validateForm' is defined but never used.","React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array.",["233"],"'CardActions' is defined but never used.","'bull' is assigned a value but never used.","'type' is assigned a value but never used.","'description' is assigned a value but never used.","'price' is assigned a value but never used.","'reviews' is assigned a value but never used.",["234"],"'navigate' is defined but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'rating' is assigned a value but never used.","'setRating' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.",["235"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'GoogleApiWrapper' is defined but never used.","'thisToolPrice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["236"],["237"],"React Hook useEffect has a missing dependency: 'toolPrice'. Either include it or remove the dependency array.",["238"],"'InputLabel' is defined but never used.","'setRoom' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["239"],"no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"240","fix":"246"},{"desc":"240","fix":"247"},{"desc":"248","fix":"249"},{"desc":"242","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},"Update the dependencies array to be: [id]",{"range":"255","text":"256"},"Update the dependencies array to be: [tool]",{"range":"257","text":"258"},"Update the dependencies array to be: [props.id]",{"range":"259","text":"260"},{"range":"261","text":"256"},{"range":"262","text":"256"},"Update the dependencies array to be: [user]",{"range":"263","text":"264"},{"range":"265","text":"258"},"Update the dependencies array to be: [toolPrice]",{"range":"266","text":"267"},"Update the dependencies array to be: [socket]",{"range":"268","text":"269"},[1126,1128],"[id]",[992,994],"[tool]",[1410,1412],"[props.id]",[2075,2077],[806,808],[1872,1874],"[user]",[2150,2152],[2690,2692],"[toolPrice]",[1586,1588],"[socket]"]